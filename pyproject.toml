[project]
name = "simpeg-drivers"
description = "Application to run SimPEG inversions with geoh5 files from Geoscience Analyst."
readme = "package.rst"
requires-python = ">=3.10, <3.12"  # geoana does not support 3.12 yet
license = {file = "LICENSE"}
authors = [
    { name = "Mira Geoscience", email = "support@mirageoscience.com" }
]
maintainers = [
    { name = "Benjamin Kary", email = "benjamink@mirageoscience.com" },
    { name = "Dominique Fournier", email = "dominiquef@mirageoscience.com"}
]
keywords = []
classifiers = []
dynamic = ["version"]

[project.urls]
repository = "https://github.com/MiraGeoscience/simpeg-drivers"
documentation = "https://mirageoscience-simpeg-drivers.readthedocs-hosted.com/"
homepage = "https://www.mirageoscience.com/mining-industry-software/python-integration/"

[tool.poetry]
version = "0.0.0"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"

[tool.poetry-dynamic-versioning.substitution]
files = ["simpeg_drivers/_version.py"]

[tool.poetry-dynamic-versioning.files."simpeg_drivers/_version.py"]
persistent-substitution = true
initial-content = """
  # These version placeholders will be replaced later during substitution.
  __version__ = "0.0.0"
  __version_tuple__ = (0, 0, 0)
"""

[tool.hatch.build.hooks.vcs]
version-file = "simpeg_drivers/_version.py"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64"]

[tool.pixi.dependencies]
libblas = { version = "*", build = "*mkl" }

## indirect dependencies, forcing them here for installation through Conda not pip
#---------------------------------------------------------------------------------
Pillow = ">=10.3.0, <10.4.0"  # from geoh5py
empymod = ">=2.2.1, <2.3.0"  # from simpeg and geoana
fsspec = "2022.*"  # from simpeg[dask]
geoana = ">=0.5.0, <0.6.0"  # from simpeg
h5py = ">=3.2.1, <4.0.0"  # from geoh5py
matplotlib-base = ">=3.8.4, <3.9.0"  # from simpeg
mkl = ">=2023.2, <2024.1"  # from simpeg
pandas = ">=2.2.1, <2.3.0"  # from SimPEG, also used by targeting-workflow, petro-lingo
pydantic = ">=2.5.2, <3.0.0"  # from geoh5py, geoapps-utils
pymatsolver = ">=0.2.0, <0.3.0"  # from simpeg
scikit-learn = ">=1.4.0, <1.5.0"  # from SimPEG, also used by geo-unsup-mapper, petro-lingo
tqdm = ">=4.66.1, <5.0.0"  # from simpeg
zarr = ">=2.14.2, <2.15.0"  # from simpeg[dask]

# force some versions to resolve incompatible resolution between PyPI and Conda
#------------------------------------------------------------------------------
tbb = "2021.12.*"  # through mkl from SimPEG
python-tzdata = "2023.4.*"  # through pandas from SimPEG

[tool.pixi.pypi-options]
index-url = "https://mirageoscienceltd.jfrog.io/artifactory/pypi/public-pypi-dev/simple"
extra-index-urls = ["https://pypi.org/simple"]

[tool.pixi.pypi-dependencies]
## Package installation from src
# ------------------------------
simpeg-drivers = { path = ".", editable = true }

## Pip dependencies from Git repositories
#----------------------------------------
# geoh5py = {git = "https://github.com/MiraGeoscience/geoh5py.git", branch = "develop"}

# octree-creation-app = {git = "https://github.com/MiraGeoscience/octree-creation-app.git", branch = "develop"}

# geoapps-utils = {git = "https://github.com/MiraGeoscience/geoapps-utils.git", branch = "develop"}

# mira-simpeg = {git = "https://github.com/MiraGeoscience/simpeg.git", branch = "develop", extras = ["dask"]}

# param-sweeps = {git = "https://github.com/MiraGeoscience/param-sweeps.git", branch = "develop"}


[tool.pixi.environments]
default = ["test", "build"]
production = []

[tool.pixi.feature.build]
pypi-dependencies = { build = "*", twine = "*"}

[tool.pixi.feature.test.pypi-dependencies]
Pygments = "*"
ipywidgets = ">=7.6.5,<8.0.0"
jupyter-book = "*"
jupytext = ">=1.14,<2.0"
pylint = "*"
pytest = "*"
pytest-cov = "*"
pyyaml = '*'
jinja2 = '*'
packaging = '*'
readthedocs-sphinx-ext = "*"
sphinx = ">=5.0,<6.0"
tomli = "*"
nbconvert = ">=7.16.4,<7.17.0"

[tool.pixi.feature.test.tasks]
test = "pytest --cov --cov-report=xml"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
ignore = [
    "B028",  # no-explicit-stacklevel for warnings.warn()
    "E501",  # line-too-long - code is reformatted (do not care about comments and docstring)
    "F401",  # unsused-import - covered by pycln
    "RUF005",  # collection-literal-concatenation - wrong suggestion with numpy arrays
    "RUF012", # TODO
]
select = [
    "A",  # flake8-builtins
    "B",  # flake8-bugbear
    "B006",  # Do not use mutable data structures for argument defaults
    "B9",  # flake8-bugbear opiniated warnings
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C9",  # mccabe
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "RUF",  # ruff rules
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.format]
# default formatting is just fine

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
scripts_are_modules = true
show_error_context = true
show_column_numbers = true
check_untyped_defs = true

plugins = [
    "numpy.typing.mypy_plugin",
]

[tool.coverage.run]
branch = true
source = ["simpeg_drivers"]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pass",
    "if TYPE_CHECKING",
    "pragma: no cover"
]

fail_under = 90

[tool.coverage.html]
skip_empty = true
skip_covered = true
