[tool.poetry]
name = "simpeg-drivers"
version = "0.2.0-alpha.1"
description = "Application to run SimPEG inversions with geoh5 files from Geoscience Analyst."
license = "MIT"
authors = ["Mira Geoscience <support@mirageoscience.com>"]
maintainers = [
    "Benjamin Kary <benjamink@mirageoscience.com>",
    "Dominique Fournier <dominiquef@mirageoscience.com>",
]
repository = "https://github.com/MiraGeoscience/simpeg-drivers"
documentation = "https://mirageoscience-simpeg-drivers.readthedocs-hosted.com/"
homepage = "https://www.mirageoscience.com/mining-industry-software/python-integration/"

packages = [
     { include = "simpeg_drivers" },
     { include = "simpeg_drivers-assets" },
]

include = [
    { path = "COPYING", format = ["sdist", "wheel"] },
    { path = "COPYING.LESSER", format = ["sdist", "wheel"] },
    { path = "LICENSE", format = ["sdist", "wheel"] },
    { path = "README.rst", format = ["sdist", "wheel"] },
    { path = "THIRD_PARTY_SOFTWARE.rst", format = ["sdist", "wheel"] },
    { path = "docs/**/THIRD_PARTY_SOFTWARE.rst", format = ["sdist", "wheel"] },
]

[tool.poetry.dependencies]
python = "^3.10"

dask = {version = "2022.10.*", extras = ["distributed"]}  # also in simpeg[dask]
discretize = "~0.10.0"  # also in simpeg, octree-creation-app
distributed = "2022.10.*"  # because conda-lock doesn't take dask extras into account
numpy = "~1.26.0" # also in geoh5py, simpeg
scipy = "~1.14.0"
zarr = "~2.14.2"  # also in simpeg[dask]

## Pip dependencies from Git repositories
#----------------------------------------
#geoh5py = {version = "~0.10.0-alpha.1", source = "pypi", allow-prereleases = true}
#geoh5py = {url = "https://github.com/MiraGeoscience/geoh5py/archive/refs/heads/develop.tar.gz"}
geoh5py = {git = "https://github.com/MiraGeoscience/geoh5py.git", rev = "develop"}
#geoh5py = {url = "http://localhost:8888/geoh5py.tar.gz"}

#octree-creation-app = {version = "~0.2.0-alpha.1", source = "pypi", allow-prereleases = true}
#octree-creation-app = {url = "https://github.com/MiraGeoscience/octree-creation-app/archive/refs/heads/develop.tar.gz"}
octree-creation-app = {git = "https://github.com/MiraGeoscience/octree-creation-app.git", rev = "develop"}
#octree-creation-app = {url = "http://localhost:8888/octree-creation-app.tar.gz"}

#geoapps-utils = {version = "~0.4.0-alpha.1", source = "pypi", allow-prereleases = true}
#geoapps-utils = {url = "https://github.com/MiraGeoscience/geoapps-utils/archive/refs/heads/develop.tar.gz"}
geoapps-utils = {git = "https://github.com/MiraGeoscience/geoapps-utils.git", rev = "develop"}
#geoapps-utils = {url = "http://localhost:8888/geoapps-utils.tar.gz"}

#mira-simpeg = {version = ">=0.21.2.1-alpha.1, <0.21.2.2.dev", source = "pypi", allow-prereleases = true}
#mira-simpeg = {url = "https://github.com/MiraGeoscience/simpeg/archive/refs/heads/develop.tar.gz"}
mira-simpeg = {git = "https://github.com/MiraGeoscience/simpeg.git", rev = "develop"}
#mira-simpeg = {url = "http://localhost:8888/mira-simpeg.tar.gz"}

#param-sweeps = {version = "~0.1.8-alpha.1", source = "pypi", allow-prereleases = true}
#param-sweeps = {url = "https://github.com/MiraGeoscience/param-sweeps/archive/refs/heads/develop.tar.gz"}
param-sweeps = {git = "https://github.com/MiraGeoscience/param-sweeps.git", rev = "develop"}
#param-sweeps = {url = "http://localhost:8888/param-sweeps.tar.gz"}

## indirect dependencies, forcing them here for installation through Conda not pip
#---------------------------------------------------------------------------------
Pillow = "~10.3.0"  # from geoh5py
fsspec = "2022.*"  # from simpeg[dask]
geoana = "~0.5.0"  # from simpeg
h5py = "^3.2.1"  # from geoh5py
matplotlib = "~3.8.4"  # from simpeg
mkl = "2023.2.0"  # from simpeg
pandas = "~2.2.1"  # from SimPEG, also used by targeting-workflow, petro-lingo
pydantic = "^2.5.2"  # from geoh5py, geoapps-utils
pydiso = "~0.0.5"  # from simpeg
pymatsolver = "~0.2.0"  # from simpeg
scikit-learn = "~1.4.0"  # from SimPEG, also used by geo-unsup-mapper, petro-lingo
tqdm = "^4.66.1"  # from simpeg

# force some versions to resolve incompatible resolution between PyPI and Conda
#------------------------------------------------------------------------------
tbb = "2021.12.*"  # through mkl from SimPEG
tzdata = "2023.4.*"  # through pandas from SimPEG

## about pip dependencies
# to be specified to work with conda-lock
# - from PyPI: my_package = { version = "1.2.3", source = "pypi" }
# - from URL: !!! no actual lock, as tag or branch can move and installation will fetch current !!!
#   - for a tag:    my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/tags/TAG.tar.gz" }
#   - for a branch: my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/heads/BRANCH.tar.gz" }
# - to actually lock on a revision: my_package = { git = "https://github.com/ORGANISATION/REPO.git", rev = "GIT_REV" }
#   (where rev value is a tag, a branch name or a commit hash). Can also use ``branch`` or ``tag`` instead of ``rev``

[tool.poetry.group.dev.dependencies]
Pygments = "*"
ipywidgets = "^7.6.5"
jupyter-book = "^0.13"
jupytext = "^1.14"
pylint = "*"
pytest = "*"
pytest-cov = "*"
readthedocs-sphinx-ext = "*"
sphinx = "^5.0"
tomli = "*"
nbconvert = "~7.16.4"

[tool.conda-lock]
platforms = ['win-64', 'linux-64']
channels = ['conda-forge']

[tool.conda-lock.dependencies]
libblas = "*=*mkl"  # because simpeg already brings in the MKL

[tool.isort]
profile = "black"

[tool.black]
# defaults are just fine

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
scripts_are_modules = true
show_error_context = true
show_column_numbers = true
check_untyped_defs = true

plugins = [
    "numpy.typing.mypy_plugin",
]

[tool.coverage.run]
branch = true
source = ["simpeg_drivers"]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pass",
    "if TYPE_CHECKING",
    "pragma: no cover"
]

fail_under = 90

[tool.coverage.html]
skip_empty = true
skip_covered = true

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"
