[tool.poetry]
name = "simpeg-drivers"
version = "0.4.0-alpha.1"
description = "Application to run SimPEG inversions with geoh5 files from Geoscience Analyst."
license = "MIT"
authors = ["Mira Geoscience <support@mirageoscience.com>"]
maintainers = [
    "Benjamin Kary <benjamink@mirageoscience.com>",
    "Dominique Fournier <dominiquef@mirageoscience.com>",
]
repository = "https://github.com/MiraGeoscience/simpeg-drivers"
documentation = "https://mirageoscience-simpeg-drivers.readthedocs-hosted.com/"
homepage = "https://www.mirageoscience.com/mining-industry-software/python-integration/"
readme = "package.rst"

packages = [
     { include = "simpeg_drivers" },
     { include = "simpeg_drivers-assets" },
]

include = [
    { path = "COPYING" },
    { path = "COPYING.LESSER" },
    { path = "LICENSE" },
    { path = "README.rst" },
    { path = "THIRD_PARTY_SOFTWARE.rst" },
    { path = "docs/**/THIRD_PARTY_SOFTWARE.rst" },
]

[tool.poetry.dependencies]
python = "^3.10"

dask-core = {version = "2025.3.*"}  # also in simpeg[dask]
discretize = "0.11.*"  # also in simpeg, octree-creation-app
distributed = "2025.3.*"  # because conda-lock doesn't take dask extras into account
numpy = "~1.26.0" # also in geoh5py, simpeg
pydantic = "^2.5.2"  # also in geoh5py, curve-apps, geoapps-utils
scikit-learn = "~1.4.0"
scipy = "~1.14.0"
tqdm = "^4.66.1"

# solvers for simpeg: not imported, but at least one required at runtime
pydiso = ">=0.1.0, <0.2.dev"
python-mumps = ">=0.0.3, <0.0.4.dev"


## Pip dependencies from Git repositories
#----------------------------------------
#geoh5py = {version = ">=0.12.0a, <0.13.dev", source = "pypi", allow-prereleases = true}
geoh5py = {git = "https://github.com/MiraGeoscience/geoh5py.git", rev = "develop"}

#octree-creation-app = {version = ">=0.4.0a, <0.5.dev", source = "pypi", allow-prereleases = true}
octree-creation-app = {git = "https://github.com/MiraGeoscience/octree-creation-app.git", rev = "develop"}

#geoapps-utils = {version = ">=0.6.0a, <0.7.dev", source = "pypi", allow-prereleases = true}
geoapps-utils = {git = "https://github.com/MiraGeoscience/geoapps-utils.git", rev = "develop"}

#mira-simpeg = {version = ">=0.23.0.2a, <0.23.1.dev", source="pypi", allow-prereleases = true, extras = ["dask"]}
mira-simpeg = {git = "https://github.com/MiraGeoscience/simpeg.git", rev = "develop", extras = ["dask"]}

#param-sweeps = {version = ">=0.3.0a, <0.4.dev", source = "pypi", allow-prereleases = true}
param-sweeps = {git = "https://github.com/MiraGeoscience/param-sweeps.git", rev = "develop"}

## about pip dependencies
# to be specified to work with conda-lock
# - from PyPI: my_package = { version = "1.2.3", source = "pypi" }
# - from Artifactory : my_package = { version = "1.2.3" }
# - from URL: !!! no actual lock, as tag or branch can move and installation will fetch current !!!
#   - for a tag:    my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/tags/TAG.tar.gz" }
#   - for a branch: my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/heads/BRANCH.tar.gz" }
# - to actually lock on a revision: my_package = { git = "https://github.com/ORGANISATION/REPO.git", rev = "GIT_REV" }
#   (where rev value is a tag, a branch name or a commit hash). Can also use ``branch`` or ``tag`` instead of ``rev``

[tool.poetry.group.dev.dependencies]
Pygments = "*"
ipywidgets = "^7.6.5"
jupyter-book = "*"
jupytext = "^1.14"
pylint = "*"
pytest = "*"
pytest-cov = "*"
pyyaml = '*'
jinja2 = '*'
packaging = '*'
readthedocs-sphinx-ext = "*"
sphinx = "^5.0"
tomli = "*"
nbconvert = "~7.16.4"

[tool.conda-lock]
platforms = ['win-64', 'linux-64']
channels = ['conda-forge']

[tool.conda-lock.dependencies]
libblas = "*=*mkl"  # because simpeg already brings in the MKL

## indirect dependencies, forcing them here for installation through Conda not pip
#---------------------------------------------------------------------------------
bokeh = ">=3.6.0, <3.7.dev"   # optional, for dask reporting
fsspec = ">=2022.0"  # from simpeg[dask]
geoana = ">=0.7.0, <0.8.dev"  # from simpeg
h5py = ">=3.2.1, <4.0.dev"  # from geoh5py
matplotlib-base = ">=3.8.4, <3.9.dev"  # from simpeg
mkl = ">=2024.2.2"
Pillow = ">=10.3.0, <10.4.dev"  # from geoh5py
pydantic = ">=2.5.2, <3.0.dev"  # from geoh5py, geoapps-utils
pymatsolver = ">=0.3.0, <0.4.dev"  # from simpeg
zarr = ">=2.14.2, <2.15.dev"  # from simpeg[dask]

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
ignore = [
    "B028",  # no-explicit-stacklevel for warnings.warn()
    "E501",  # line-too-long - code is reformatted (do not care about comments and docstring)
    "F401",  # unsused-import - covered by pycln
    "RUF005",  # collection-literal-concatenation - wrong suggestion with numpy arrays
    "RUF012", # TODO
]
select = [
    "A",  # flake8-builtins
    "B",  # flake8-bugbear
    "B006",  # Do not use mutable data structures for argument defaults
    "B9",  # flake8-bugbear opiniated warnings
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C9",  # mccabe
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "RUF",  # ruff rules
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.format]
# default formatting is just fine

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
scripts_are_modules = true
show_error_context = true
show_column_numbers = true
check_untyped_defs = true

plugins = [
    "numpy.typing.mypy_plugin",
]

[tool.coverage.run]
branch = true
source = ["simpeg_drivers"]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pass",
    "if TYPE_CHECKING",
    "pragma: no cover"
]

fail_under = 85

[tool.coverage.html]
skip_empty = true
skip_covered = true

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"
